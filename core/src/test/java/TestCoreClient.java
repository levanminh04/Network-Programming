// Gi·∫£ s·ª≠ file n√†y ƒë∆∞·ª£c ƒë·∫∑t trong th∆∞ m·ª•c test c·ªßa module `core`
// package com.n9.core; 

import com.n9.shared.model.dto.auth.LoginRequestDto;
import com.n9.shared.model.dto.auth.RegisterRequestDto;
import com.n9.shared.model.dto.game.PlayCardRequestDto;
import com.n9.shared.model.dto.match.MatchStartDto;
import com.n9.shared.protocol.MessageEnvelope;
import com.n9.shared.protocol.MessageFactory;
import com.n9.shared.MessageProtocol;
import com.n9.shared.util.JsonUtils;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;

/**
 * Test Client ƒë·ªÉ ki·ªÉm th·ª≠ Core Server sau khi ƒë√£ refactor.
 * M√¥ ph·ªèng lu·ªìng: Register -> Login -> Game Start -> Play Card
 *
 * @version 2.1.0 (Refactored for MVP Protocol)
 */
public class TestCoreClient {

    private static final String HOST = "localhost";
    private static final int PORT = 9090;

    public static void main(String[] args) {
        System.out.println("üß™ Test Core Client Starting (MVP Protocol)...");
        System.out.println();

        try (Socket socket = new Socket(HOST, PORT);
             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             BufferedWriter out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))) {

            System.out.println("‚úÖ Connected to Core Server at " + HOST + ":" + PORT);
            System.out.println();

            // --- B·∫ÆT ƒê·∫¶U LU·ªíNG TEST LOGIC ---

            // Test 1: ƒêƒÉng k√Ω m·ªôt t√†i kho·∫£n m·ªõi
            // Ch√∫ng ta kh√¥ng c·∫ßn sessionId cho l·∫ßn ƒë·∫ßu ƒëƒÉng k√Ω.
            String sessionIdAfterRegister = testRegister(in, out);
            if (sessionIdAfterRegister == null) {
                System.err.println("‚ùå Registration failed. Aborting further tests.");
                return;
            }

            // Test 2: ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n v·ª´a t·∫°o
            String sessionIdAfterLogin = testLogin(in, out);
            if (sessionIdAfterLogin == null) {
                System.err.println("‚ùå Login failed. Aborting further tests.");
                return;
            }
            System.out.println("üîë Using Session ID for subsequent tests: " + sessionIdAfterLogin);
            System.out.println();

            // Test 3: B·∫Øt ƒë·∫ßu m·ªôt tr·∫≠n game (gi·∫£ l·∫≠p)
            // Y√™u c·∫ßu n√†y c·∫ßn c√≥ sessionId h·ª£p l·ªá
            testGameStart(in, out, sessionIdAfterLogin);

            // Test 4: Ch∆°i m·ªôt l√° b√†i
            // Y√™u c·∫ßu n√†y c≈©ng c·∫ßn sessionId h·ª£p l·ªá
            testPlayCard(in, out, sessionIdAfterLogin, "match-mvp-123", 25);

            System.out.println("\n‚úÖ All MVP tests completed successfully!");

        } catch (Exception e) {
            System.err.println("‚ùå A critical error occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Test AUTH.REGISTER_REQUEST
     * @return sessionId n·∫øu ƒëƒÉng k√Ω th√†nh c√¥ng, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ null.
     */
    private static String testRegister(BufferedReader in, BufferedWriter out) throws Exception {
        System.out.println("=== Test 1: AUTH.REGISTER_REQUEST ===");

        RegisterRequestDto registerDto = new RegisterRequestDto();
        // S·ª≠ d·ª•ng m·ªôt username ng·∫´u nhi√™n ƒë·ªÉ m·ªói l·∫ßn ch·∫°y test ƒë·ªÅu th√†nh c√¥ng
        String username = "testuser" + System.currentTimeMillis() % 1000;
        registerDto.setUsername(username);
        registerDto.setEmail(username + "@test.com");
        registerDto.setPassword("password123");
        registerDto.setDisplayName("Test User");

        MessageEnvelope request = MessageFactory.createRequest(MessageProtocol.Type.AUTH_REGISTER_REQUEST, registerDto);

        // G·ª≠i v√† nh·∫≠n ph·∫£n h·ªìi
        MessageEnvelope response = sendAndReceive(in, out, request);

        if (response != null && MessageProtocol.Type.AUTH_REGISTER_SUCCESS.equals(response.getType())) {
            return response.getSessionId();
        }
        return null;
    }

    /**
     * Test AUTH.LOGIN_REQUEST
     * @return sessionId n·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ null.
     */
    private static String testLogin(BufferedReader in, BufferedWriter out) throws Exception {
        System.out.println("=== Test 2: AUTH.LOGIN_REQUEST ===");

        LoginRequestDto loginDto = new LoginRequestDto();
        loginDto.setUsername("alice"); // Gi·∫£ s·ª≠ user "alice" ƒë√£ t·ªìn t·∫°i
        loginDto.setPassword("password123");

        MessageEnvelope request = MessageFactory.createRequest(MessageProtocol.Type.AUTH_LOGIN_REQUEST, loginDto);

        MessageEnvelope response = sendAndReceive(in, out, request);

        if (response != null && MessageProtocol.Type.AUTH_LOGIN_SUCCESS.equals(response.getType())) {
            return response.getSessionId();
        }
        return null;
    }

    /**
     * Test GAME.START message
     */
    private static void testGameStart(BufferedReader in, BufferedWriter out, String sessionId) throws Exception {
        System.out.println("=== Test 3: GAME.START ===");

        MatchStartDto startDto = new MatchStartDto();
        startDto.setMatchId("match-mvp-123");

        MessageEnvelope request = MessageFactory.createRequest(MessageProtocol.Type.GAME_START, startDto);
        request.setSessionId(sessionId); // G·∫Øn sessionId v√†o request

        sendAndReceive(in, out, request);
    }

    /**
     * Test GAME.CARD_PLAY_REQUEST message
     */
    private static void testPlayCard(BufferedReader in, BufferedWriter out,
                                     String sessionId, String matchId, int cardId) throws Exception {
        System.out.println("=== Test 4: GAME.CARD_PLAY_REQUEST ===");

        PlayCardRequestDto playDto = new PlayCardRequestDto();
        playDto.setGameId(matchId);
        playDto.setRoundNumber(1);
        playDto.setCardId(cardId);

        MessageEnvelope request = MessageFactory.createRequest(MessageProtocol.Type.GAME_CARD_PLAY_REQUEST, playDto);
        request.setSessionId(sessionId); // G·∫Øn sessionId v√†o request

        sendAndReceive(in, out, request);
    }

    /**
     * H√†m ti·ªán √≠ch ƒë·ªÉ g·ª≠i m·ªôt request v√† nh·∫≠n l·∫°i response.
     */
    private static MessageEnvelope sendAndReceive(BufferedReader in, BufferedWriter out, MessageEnvelope request) throws Exception {
        String jsonRequest = JsonUtils.toJson(request);
        System.out.println("üì§ Sending: " + jsonRequest);

        out.write(jsonRequest);
        out.newLine();
        out.flush();

        String jsonResponse = in.readLine();
        System.out.println("üì• Received: " + jsonResponse);

        MessageEnvelope responseEnvelope = JsonUtils.fromJson(jsonResponse, MessageEnvelope.class);
        if (responseEnvelope != null) {
            System.out.println("   Type: " + responseEnvelope.getType());
            System.out.println("   CorrelationId: " + responseEnvelope.getCorrelationId());
            if (responseEnvelope.getError() != null) {
                System.err.println("   Error: " + responseEnvelope.getError().getCode() + " - " + responseEnvelope.getError().getMessage());
            }
        }
        System.out.println();
        Thread.sleep(500); // Ch·ªù m·ªôt ch√∫t gi·ªØa c√°c l·∫ßn test
        return responseEnvelope;
    }
}