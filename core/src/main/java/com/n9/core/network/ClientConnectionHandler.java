package com.n9.core.network;

import com.n9.core.service.AuthService;
import com.n9.core.service.GameService;
import com.n9.core.service.SessionManager;
import com.n9.shared.model.dto.game.CardDto;
import com.n9.shared.model.dto.game.PlayCardAckDto;
import com.n9.shared.model.dto.game.PlayCardRequestDto;
import com.n9.shared.model.dto.match.MatchStartDto;
import com.n9.shared.protocol.ErrorInfo;
import com.n9.shared.protocol.MessageEnvelope;
import com.n9.shared.protocol.MessageFactory;
import com.n9.shared.MessageProtocol;
import com.n9.shared.util.JsonUtils;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.SocketTimeoutException;

/**
 * ClientConnectionHandler - X·ª≠ l√Ω m·ªôt k·∫øt n·ªëi TCP t·ª´ client.
 * ƒê√≥ng vai tr√≤ l√† b·ªô ƒë·ªãnh tuy·∫øn ch√≠nh (Main Router), nh·∫≠n t·∫•t c·∫£ c√°c tin nh·∫Øn,
 * x√°c th·ª±c session, v√† ·ªßy quy·ªÅn cho c√°c service t∆∞∆°ng ·ª©ng x·ª≠ l√Ω.
 *
 * @version 1.1.0 (Refactored for MVP)
 */
public class ClientConnectionHandler implements Runnable {

    private final Socket socket;
    private final GameService gameService;
    private final AuthService authService;
    private final SessionManager sessionManager;

    private BufferedReader reader;
    private BufferedWriter writer;

    /**
     * Constructor ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ nh·∫≠n t·∫•t c·∫£ c√°c service c·∫ßn thi·∫øt.
     */
    public ClientConnectionHandler(
            Socket socket,
            GameService gameService,
            AuthService authService,
            SessionManager sessionManager
    ) {
        this.socket = socket;
        this.gameService = gameService;
        this.authService = authService;
        this.sessionManager = sessionManager;
    }

    @Override
    public void run() {
        String clientAddress = socket.getRemoteSocketAddress().toString();
        System.out.println("‚úÖ New connection from: " + clientAddress);

        try {
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"));
            writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF-8"));

            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println("üì® Received: " + line.substring(0, Math.min(100, line.length())));

                MessageEnvelope request = null;
                MessageEnvelope response;
                try {
                    request = JsonUtils.fromJson(line, MessageEnvelope.class);
                    if (request == null) {
                        // T·∫°o l·ªói th·ªß c√¥ng n·∫øu JSON kh√¥ng h·ª£p l·ªá
                        response = new MessageEnvelope(MessageProtocol.Type.SYSTEM_ERROR, "unknown", null);
                        response.setError(new ErrorInfo("INVALID_JSON", "Invalid JSON format received."));
                    } else {
                        response = handleMessage(request);
                    }
                } catch (Exception e) {
                    System.err.println("‚ùå Unhandled error processing message: " + e.getMessage());
                    e.printStackTrace();
                    response = MessageFactory.createErrorResponse(request, "INTERNAL_SERVER_ERROR", "An unexpected error occurred.");
                }

                String jsonResponse = JsonUtils.toJson(response);
                sendMessage(jsonResponse);
                System.out.println("üì§ Sent: " + jsonResponse.substring(0, Math.min(100, jsonResponse.length())));
            }
        } catch (SocketTimeoutException e) {
            System.err.println("‚è±Ô∏è Timeout from " + clientAddress);
        } catch (IOException e) {
            // L·ªói n√†y th∆∞·ªùng x·∫£y ra khi client ng·∫Øt k·∫øt n·ªëi ƒë·ªôt ng·ªôt, kh√¥ng c·∫ßn in stack trace
            System.err.println("‚ùå Connection error from " + clientAddress + ": " + e.getMessage());
        } catch (Exception e) {
            System.err.println("‚ùå Unexpected error in run loop: " + clientAddress);
            e.printStackTrace();
        } finally {
            cleanup(clientAddress);
        }
    }

    /**
     * B·ªô ƒë·ªãnh tuy·∫øn ch√≠nh, nh·∫≠n MessageEnvelope v√† g·ªçi handler t∆∞∆°ng ·ª©ng.
     */
    private MessageEnvelope handleMessage(MessageEnvelope envelope) {
        String type = envelope.getType();

        switch (type) {
            // ========== AUTH DOMAIN (D√†nh cho L·∫≠p tr√¨nh vi√™n A) ==========
            case MessageProtocol.Type.AUTH_REGISTER_REQUEST:
                return handleRegister(envelope);
            case MessageProtocol.Type.AUTH_LOGIN_REQUEST:
                return handleLogin(envelope);
            case MessageProtocol.Type.AUTH_LOGOUT_REQUEST:
                return handleLogout(envelope);

            // ========== LOBBY DOMAIN (D√†nh cho L·∫≠p tr√¨nh vi√™n B) ==========
            case MessageProtocol.Type.LOBBY_MATCH_REQUEST:
                return handleMatchRequest(envelope);

            // ========== GAME DOMAIN (V√≠ d·ª• ƒë√£ refactor) ==========
            case MessageProtocol.Type.GAME_START:
                return handleGameStart(envelope);
            case MessageProtocol.Type.GAME_CARD_PLAY_REQUEST:
                return handlePlayCard(envelope);

            default:
                return MessageFactory.createErrorResponse(envelope, "UNKNOWN_TYPE", "Unknown message type: " + type);
        }
    }

    // ============================================================================
    // AUTH HANDLERS (PLACEHOLDERS CHO L·∫¨P TR√åNH VI√äN A)
    // ============================================================================

    private MessageEnvelope handleRegister(MessageEnvelope envelope) {
        // TODO: L·∫≠p tr√¨nh vi√™n A tri·ªÉn khai logic n√†y.
        // G·ª£i √Ω:
        // 1. Parse payload th√†nh RegisterRequestDto.
        // 2. G·ªçi authService.register(...).
        // 3. N·∫øu th√†nh c√¥ng, g·ªçi sessionManager.createSession(...).
        // 4. T·∫°o response th√†nh c√¥ng v·ªõi sessionId v√† th√¥ng tin user.
        // 5. B·∫Øt exception v√† t·∫°o response l·ªói n·∫øu c√≥.
        return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Register functionality is not yet implemented.");
    }

    private MessageEnvelope handleLogin(MessageEnvelope envelope) {
        // TODO: L·∫≠p tr√¨nh vi√™n A tri·ªÉn khai logic n√†y.
        return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Login functionality is not yet implemented.");
    }

    private MessageEnvelope handleLogout(MessageEnvelope envelope) {
        // TODO: L·∫≠p tr√¨nh vi√™n A tri·ªÉn khai logic n√†y.
        return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Logout functionality is not yet implemented.");
    }

    // ============================================================================
    // LOBBY HANDLERS (PLACEHOLDERS CHO L·∫¨P TR√åNH VI√äN B)
    // ============================================================================

    private MessageEnvelope handleMatchRequest(MessageEnvelope envelope) {
        // TODO: L·∫≠p tr√¨nh vi√™n B tri·ªÉn khai logic n√†y.
        // G·ª£i √Ω:
        // 1. X√°c th·ª±c session b·∫±ng sessionManager.getSession(...).
        // 2. L·∫•y userId t·ª´ context.
        // 3. G·ªçi matchmakingService.requestMatch(userId).
        // 4. Tr·∫£ v·ªÅ m·ªôt response x√°c nh·∫≠n ƒë√£ v√†o h√†ng ƒë·ª£i.
        return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Matchmaking functionality is not yet implemented.");
    }

    // ============================================================================
    // GAME HANDLERS (V√ç D·ª§ ƒê√É REFACTOR)
    // ============================================================================

    private MessageEnvelope handleGameStart(MessageEnvelope envelope) {
        // B∆∞·ªõc 1: M·ªçi handler c·∫ßn x√°c th·ª±c ƒë·ªÅu ph·∫£i ki·ªÉm tra session tr∆∞·ªõc ti√™n.
        SessionManager.SessionContext context = sessionManager.getSession(envelope.getSessionId());
        if (context == null) {
            return MessageFactory.createErrorResponse(envelope, "AUTH_REQUIRED", "Invalid or missing session.");
        }
        String playerId = context.getUserId();

        try {
            // B∆∞·ªõc 2: Parse payload.
            MatchStartDto startDto = JsonUtils.getObjectMapper().convertValue(envelope.getPayload(), MatchStartDto.class);
            String matchId = startDto.getMatchId();

            if (matchId == null) {
                return MessageFactory.createErrorResponse(envelope, "VALIDATION_ERROR", "Missing matchId in payload.");
            }

            // B∆∞·ªõc 3: G·ªçi service ƒë·ªÉ x·ª≠ l√Ω logic.
            GameService.GameState game = gameService.getGameState(matchId);
            if (game == null) {
                return MessageFactory.createErrorResponse(envelope, "GAME_NOT_FOUND", "Game not found or not initialized.");
            }

            // ... (Logic l·∫•y b√†i, v.v...)
            Object responsePayload = new Object(); // Thay th·∫ø b·∫±ng DTO response th·ª±c t·∫ø

            // B∆∞·ªõc 4: T·∫°o v√† tr·∫£ v·ªÅ response th√†nh c√¥ng.
            return MessageFactory.createResponse(envelope, MessageProtocol.Type.GAME_START, responsePayload);

        } catch (Exception e) {
            System.err.println("‚ùå Error in handleGameStart: " + e.getMessage());
            return MessageFactory.createErrorResponse(envelope, "INTERNAL_SERVER_ERROR", "Failed to start game.");
        }
    }

    private MessageEnvelope handlePlayCard(MessageEnvelope envelope) {
        SessionManager.SessionContext context = sessionManager.getSession(envelope.getSessionId());
        if (context == null) {
            return MessageFactory.createErrorResponse(envelope, "AUTH_REQUIRED", "Invalid or missing session.");
        }
        String playerId = context.getUserId();

        try {
            PlayCardRequestDto request = JsonUtils.getObjectMapper().convertValue(envelope.getPayload(), PlayCardRequestDto.class);
            String matchId = request.getGameId();

            if (matchId == null) {
                return MessageFactory.createErrorResponse(envelope, "VALIDATION_ERROR", "Missing gameId in payload.");
            }

            CardDto playedCard = gameService.playCard(matchId, playerId, request.getCardId());
            System.out.println("üÉè Player " + playerId + " played a card in match " + matchId);

            PlayCardAckDto ackDto = new PlayCardAckDto();
            ackDto.setGameId(matchId);
            ackDto.setCardId(playedCard.getCardId());
            //...

            return MessageFactory.createResponse(envelope, MessageProtocol.Type.GAME_CARD_PLAY_SUCCESS, ackDto);

        } catch (IllegalArgumentException e) {
            System.err.println("‚ö†Ô∏è Invalid card play: " + e.getMessage());
            return MessageFactory.createErrorResponse(envelope, "INVALID_PLAY", e.getMessage());
        } catch (Exception e) {
            System.err.println("‚ùå Error in handlePlayCard: " + e.getMessage());
            return MessageFactory.createErrorResponse(envelope, "INTERNAL_SERVER_ERROR", "Failed to play card.");
        }
    }

    // ============================================================================
    // UTILITY METHODS
    // ============================================================================

    /**
     * G·ª≠i m·ªôt tin nh·∫Øn ƒë·∫øn client m·ªôt c√°ch an to√†n (thread-safe).
     * ƒê∆∞·ª£c g·ªçi b·ªüi c√°c service kh√°c (v√≠ d·ª•: MatchmakingService) ƒë·ªÉ ƒë·∫©y th√¥ng b√°o.
     * @param jsonMessage Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c serialize th√†nh chu·ªói JSON.
     */
    public synchronized void sendMessage(String jsonMessage) {
        try {
            if (writer != null && !socket.isClosed()) {
                writer.write(jsonMessage);
                writer.newLine();
                writer.flush();
            }
        } catch (IOException e) {
            System.err.println("‚ùå Failed to send message to " + socket.getRemoteSocketAddress() + ": " + e.getMessage());
        }
    }

    /**
     * D·ªçn d·∫πp t√†i nguy√™n khi k·∫øt n·ªëi b·ªã ƒë√≥ng.
     */
    private void cleanup(String clientAddress) {
        try {
            if (reader != null) reader.close();
            if (writer != null) writer.close();
            if (socket != null && !socket.isClosed()) socket.close();
            System.out.println("üßπ Connection closed: " + clientAddress);
        } catch (IOException e) {
            System.err.println("‚ùå Error during cleanup: " + e.getMessage());
        }
    }
}