package com.n9.core.network;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.n9.core.service.AuthService;
import com.n9.core.service.GameService;
import com.n9.core.service.SessionManager;
import com.n9.shared.protocol.ErrorInfo;
import com.n9.shared.protocol.MessageEnvelope;
import com.n9.shared.protocol.MessageFactory;
import com.n9.shared.MessageProtocol;
import com.n9.shared.util.JsonUtils;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.ExecutorService;

/**
 * ClientConnectionHandler - X·ª≠ l√Ω k·∫øt n·ªëi TCP t·ª´ Gateway.
 * Tri·ªÉn khai m√¥ h√¨nh I/O Thread + Worker Pool v√† Length-Prefixed Framing.
 *
 * @version 1.3.0 (Implemented Length-Prefixed Framing)
 */
public class ClientConnectionHandler implements Runnable {

    private final Socket socket;
    private final GameService gameService;
    private final AuthService authService;
    private final SessionManager sessionManager;
    private final ExecutorService pool;

    // THAY ƒê·ªîI: Chuy·ªÉn sang Data streams ƒë·ªÉ x·ª≠ l√Ω byte v√† c√°c ki·ªÉu nguy√™n th·ªßy
    private DataInputStream in;
    private DataOutputStream out;

    private String currentSessionId = null;

    /**
     * Constructor ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ nh·∫≠n c·∫£ ExecutorService.
     */
    public ClientConnectionHandler(
            Socket socket,
            GameService gameService,
            AuthService authService,
            SessionManager sessionManager,
            ExecutorService pool
    ) {
        this.socket = socket;
        this.gameService = gameService;
        this.authService = authService;
        this.sessionManager = sessionManager;
        this.pool = pool;
    }

    @Override
    public void run() {
        String clientAddress = socket.getRemoteSocketAddress().toString();
        System.out.println("‚úÖ I/O Thread started for connection from: " + clientAddress);

        try {
            // THAY ƒê·ªîI: Kh·ªüi t·∫°o DataInputStream v√† DataOutputStream
            in = new DataInputStream(socket.getInputStream());
            out = new DataOutputStream(socket.getOutputStream());

            // THAY ƒê·ªîI: V√≤ng l·∫∑p v√¥ t·∫≠n ƒë·ªçc theo c∆° ch·∫ø length-prefixed
            while (!socket.isClosed()) {
                // 1. ƒê·ªçc 4 byte ƒë·∫ßu ti√™n ƒë·ªÉ bi·∫øt ƒë·ªô d√†i tin nh·∫Øn
                int length = in.readInt();

                if (length > 0) {
                    // 2. ƒê·ªçc ch√≠nh x√°c `length` byte ti·∫øp theo ƒë·ªÉ c√≥ chu·ªói JSON ho√†n ch·ªânh
                    byte[] messageBytes = new byte[length];
                    in.readFully(messageBytes, 0, length);
                    final String messageLine = new String(messageBytes, StandardCharsets.UTF_8);

                    System.out.println("üì® I/O Thread received message of length: " + length);

                    // 3. T·∫°o m·ªôt "Nhi·ªám v·ª•" ƒë·ªÉ x·ª≠ l√Ω logic trong m·ªôt lu·ªìng worker
                    Runnable processingTask = () -> {
                        MessageEnvelope request = null;
                        MessageEnvelope response;
                        try {
                            request = JsonUtils.fromJson(messageLine, MessageEnvelope.class);
                            if (request == null) {
                                response = new MessageEnvelope(MessageProtocol.Type.SYSTEM_ERROR, "unknown", null);
                                response.setError(new ErrorInfo("INVALID_JSON", "Invalid JSON format."));
                            } else {
                                // Worker thread th·ª±c s·ª± g·ªçi handleMessage
                                response = handleMessage(request);
                            }
                        } catch (Exception e) {
                            System.err.println("‚ùå Worker thread caught error: " + e.getMessage());
                            response = MessageFactory.createErrorResponse(request, "INTERNAL_SERVER_ERROR", "An unexpected error occurred.");
                        }

                        // Worker thread t·ª± g·ª≠i response v·ªÅ Gateway
                        try {
                            String jsonResponse = JsonUtils.toJson(response);
                            sendMessage(jsonResponse); // sendMessage b√¢y gi·ªù c≈©ng d√πng DataOutputStream
                            System.out.println("üì§ Worker thread sent: " + jsonResponse.substring(0, Math.min(100, jsonResponse.length())));
                        } catch (JsonProcessingException e) {
                            System.err.println("‚ùå Worker thread failed to serialize response: " + e.getMessage());
                        }
                    };

                    // 4. Lu·ªìng I/O giao vi·ªác v√† ngay l·∫≠p t·ª©c quay l·∫°i ch·ªù tin nh·∫Øn ti·∫øp theo
                    pool.submit(processingTask);
                }
            }
        } catch (EOFException e) {
            // ƒê√¢y l√† tr∆∞·ªùng h·ª£p b√¨nh th∆∞·ªùng khi Gateway ƒë√≥ng k·∫øt n·ªëi, kh√¥ng ph·∫£i l·ªói
            System.out.println("üîå Gateway closed the connection gracefully: " + clientAddress);
        } catch (IOException e) {
            System.err.println("‚ùå Connection lost with " + clientAddress + ": " + e.getMessage());
        } catch (Exception e) {
            System.err.println("‚ùå Unexpected error in I/O loop for " + clientAddress);
            e.printStackTrace();
        } finally {
            cleanup(clientAddress);
        }
    }

    // handleMessage v√† c√°c h√†m handler kh√°c gi·ªØ nguy√™n, v√¨ ch√∫ng ƒë∆∞·ª£c g·ªçi b·ªüi worker thread
    // ...
    private MessageEnvelope handleMessage(MessageEnvelope envelope) {
        String type = envelope.getType();
        MessageEnvelope response;

        switch (type) {
            // ... (T·∫•t c·∫£ c√°c case c·ªßa b·∫°n)
            case MessageProtocol.Type.AUTH_REGISTER_REQUEST:
                response = handleRegister(envelope);
                break;
            case MessageProtocol.Type.AUTH_LOGIN_REQUEST:
                response = handleLogin(envelope);
                break;
            // ...
            default:
                response = MessageFactory.createErrorResponse(envelope, "UNKNOWN_TYPE", "Unknown message type: " + type);
        }

        if (response != null && response.getSessionId() != null && response.getError() == null) {
            this.currentSessionId = response.getSessionId();
        }

        return response;
    }
    private MessageEnvelope handleRegister(MessageEnvelope envelope) { return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Not implemented."); }
    private MessageEnvelope handleLogin(MessageEnvelope envelope) { return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Not implemented."); }
    private MessageEnvelope handleLogout(MessageEnvelope envelope) { return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Not implemented."); }
    private MessageEnvelope handleMatchRequest(MessageEnvelope envelope) { return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Not implemented."); }
    private MessageEnvelope handleGameStart(MessageEnvelope envelope) { return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Not implemented."); }
    private MessageEnvelope handlePlayCard(MessageEnvelope envelope) { return MessageFactory.createErrorResponse(envelope, "NOT_IMPLEMENTED", "Not implemented."); }


    /**
     * THAY ƒê·ªîI: G·ª≠i m·ªôt tin nh·∫Øn theo ƒë·ªãnh d·∫°ng length-prefixed.
     * Ph∆∞∆°ng th·ª©c n√†y l√† thread-safe nh·ªù t·ª´ kh√≥a `synchronized`.
     */
    public synchronized void sendMessage(String jsonMessage) {
        try {
            if (out != null && !socket.isClosed()) {
                byte[] jsonBytes = jsonMessage.getBytes(StandardCharsets.UTF_8);
                int length = jsonBytes.length;

                // 1. G·ª≠i 4 byte ƒë·ªô d√†i c·ªßa tin nh·∫Øn tr∆∞·ªõc
                out.writeInt(length);
                // 2. G·ª≠i n·ªôi dung tin nh·∫Øn (d∆∞·ªõi d·∫°ng byte)
                out.write(jsonBytes);

                out.flush();
            }
        } catch (IOException e) {
            System.err.println("‚ùå Failed to send message to " + socket.getRemoteSocketAddress() + ": " + e.getMessage());
        }
    }

    private void cleanup(String clientAddress) {
        if (this.currentSessionId != null) {
            sessionManager.removeSession(this.currentSessionId);
        }
        try {
            // THAY ƒê·ªîI: ƒê√≥ng c√°c stream m·ªõi
            if (in != null) in.close();
            if (out != null) out.close();
            if (socket != null && !socket.isClosed()) socket.close();
            System.out.println("üßπ Connection cleaned up for: " + clientAddress);
        } catch (IOException e) {
            System.err.println("‚ùå Error during cleanup: " + e.getMessage());
        }
    }
}