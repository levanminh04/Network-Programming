package com.n9.core.service;

import com.n9.core.database.DatabaseManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

/**
 * SessionManager - Qu·∫£n l√Ω c√°c phi√™n l√†m vi·ªác (session) ƒëang ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng.
 *
 * Vai tr√≤ ch√≠nh:
 * - T·∫°o session sau khi ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω th√†nh c√¥ng.
 * - X√°c th·ª±c sessionId trong m·ªói request c·∫ßn ƒë∆∞·ª£c b·∫£o v·ªá.
 * - Cung c·∫•p "b·ªëi c·∫£nh ng∆∞·ªùi d√πng" (user context) t·ª´ sessionId.
 * - X√≥a session khi ng∆∞·ªùi d√πng ƒëƒÉng xu·∫•t ho·∫∑c m·∫•t k·∫øt n·ªëi.
 *
 * Chi·∫øn l∆∞·ª£c: S·ª≠ d·ª•ng ConcurrentHashMap trong b·ªô nh·ªõ ƒë·ªÉ tra c·ª©u nhanh,
 * v√† ƒë·ªìng b·ªô xu·ªëng database ƒë·ªÉ theo d√µi v√† qu·∫£n l√Ω.
 *
 * @version 1.1.0 (Refactored for MVP)
 */
public class SessionManager {

    /**
     * L·ªõp n·ªôi (inner class) ch·ª©a th√¥ng tin c·ªßa m·ªôt phi√™n l√†m vi·ªác.
     * ƒê√¢y l√† "b·ªô nh·ªõ" v·ªÅ m·ªôt ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p.
     */
    public static class SessionContext {
        private final String sessionId;
        private final String userId;
        private final String username;
        private String currentMatchId; // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ng∆∞·ªùi d√πng v√†o tr·∫≠n
        private long lastActivityTimestamp;

        public SessionContext(String sessionId, String userId, String username) {
            this.sessionId = sessionId;
            this.userId = userId;
            this.username = username;
            this.lastActivityTimestamp = System.currentTimeMillis();
        }

        public void updateActivity() {
            this.lastActivityTimestamp = System.currentTimeMillis();
        }

        // Getters
        public String getSessionId() { return sessionId; }
        public String getUserId() { return userId; }
        public String getUsername() { return username; }
        public String getCurrentMatchId() { return currentMatchId; }

        // Setter
        public void setCurrentMatchId(String currentMatchId) { this.currentMatchId = currentMatchId; }
    }

    // "Danh b·∫°" trong b·ªô nh·ªõ, tra c·ª©u c·ª±c nhanh: sessionId -> SessionContext
    private final ConcurrentHashMap<String, SessionContext> activeSessions;
    private final DatabaseManager dbManager;

    public SessionManager(DatabaseManager dbManager) {
        this.dbManager = dbManager;
        this.activeSessions = new ConcurrentHashMap<>();
    }

    /**
     * üéüÔ∏è T·∫°o m·ªôt session m·ªõi sau khi ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω th√†nh c√¥ng.
     *
     * @param userId ID c·ªßa ng∆∞·ªùi d√πng (d∆∞·ªõi d·∫°ng String)
     * @param username T√™n ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
     * @return Chu·ªói sessionId duy nh·∫•t ƒë∆∞·ª£c t·∫°o ra.
     */
    public String createSession(String userId, String username) {
        // 1. T·∫°o sessionId ng·∫´u nhi√™n, an to√†n
        String sessionId = UUID.randomUUID().toString();

        // 2. T·∫°o ƒë·ªëi t∆∞·ª£ng context ƒë·ªÉ l∆∞u v√†o b·ªô nh·ªõ
        SessionContext context = new SessionContext(sessionId, userId, username);
        activeSessions.put(sessionId, context);

        // 3. (T√πy ch·ªçn) L∆∞u session xu·ªëng DB ƒë·ªÉ theo d√µi
        // B·ªè qua l·ªói n·∫øu DB c√≥ v·∫•n ƒë·ªÅ, v√¨ session trong b·ªô nh·ªõ v·∫´n ho·∫°t ƒë·ªông
        try {
            persistSessionToDB(sessionId, userId);
        } catch (SQLException e) {
            System.err.println("‚ö†Ô∏è WARNING: Failed to persist session to DB: " + e.getMessage());
        }

        System.out.println("‚úÖ Session created: " + sessionId + " for user: " + username);
        return sessionId;
    }

    /**
     * üîç Ki·ªÉm tra m·ªôt sessionId c√≥ h·ª£p l·ªá kh√¥ng v√† l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.
     * ƒê√¢y l√† h√†m ƒë∆∞·ª£c g·ªçi ·ªü ƒë·∫ßu m·ªói request c·∫ßn x√°c th·ª±c.
     *
     * @param sessionId Session ID do client g·ª≠i l√™n.
     * @return SessionContext n·∫øu h·ª£p l·ªá, ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y/kh√¥ng h·ª£p l·ªá.
     */
    public SessionContext getSession(String sessionId) {
        if (sessionId == null || sessionId.isEmpty()) {
            return null;
        }

        SessionContext context = activeSessions.get(sessionId);

        // N·∫øu session t·ªìn t·∫°i, c·∫≠p nh·∫≠t th·ªùi gian ho·∫°t ƒë·ªông cu·ªëi c√πng
        if (context != null) {
            context.updateActivity();
        }

        return context;
    }

    /**
     * üßπ X√≥a m·ªôt session khi ng∆∞·ªùi d√πng ƒëƒÉng xu·∫•t ho·∫∑c m·∫•t k·∫øt n·ªëi.
     *
     * @param sessionId Session ID c·∫ßn x√≥a.
     */
    public void removeSession(String sessionId) {
        if (sessionId == null) {
            return;
        }

        // X√≥a kh·ªèi b·ªô nh·ªõ
        SessionContext removedContext = activeSessions.remove(sessionId);

        // N·∫øu x√≥a th√†nh c√¥ng, th√¨ x√≥a c·∫£ trong DB
        if (removedContext != null) {
            try {
                deleteSessionFromDB(sessionId);
            } catch (SQLException e) {
                System.err.println("‚ö†Ô∏è WARNING: Failed to delete session from DB: " + e.getMessage());
            }
            System.out.println("üßπ Session removed for user: " + removedContext.getUsername());
        }
    }

    /**
     * üéÆ C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng khi h·ªç tham gia m·ªôt tr·∫≠n ƒë·∫•u.
     *
     * @param sessionId Session c·ªßa ng∆∞·ªùi d√πng.
     * @param matchId ID c·ªßa tr·∫≠n ƒë·∫•u h·ªç v·ª´a tham gia.
     */
    public void setMatchId(String sessionId, String matchId) {
        SessionContext context = activeSessions.get(sessionId);
        if (context != null) {
            context.setCurrentMatchId(matchId);
            // (T√πy ch·ªçn n√¢ng cao) c√≥ th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i n√†y xu·ªëng DB
        }
    }

    /**
     * L·∫•y s·ªë l∆∞·ª£ng session ƒëang ho·∫°t ƒë·ªông. H·ªØu √≠ch cho vi·ªác monitoring.
     * @return S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng ƒëang online.
     */
    public int getActiveSessionCount() {
        return activeSessions.size();
    }


    // ============================================================================
    // C√ÅC H√ÄM T∆Ø∆†NG T√ÅC V·ªöI DATABASE (PRIVATE)
    // ============================================================================

    private void persistSessionToDB(String sessionId, String userId) throws SQLException {
        // ƒêI·ªÄU CH·ªàNH: S·ª≠ d·ª•ng ƒë√∫ng c√¢u l·ªánh SQL kh·ªõp v·ªõi script database v1.1.0
        // "INSERT ... ON DUPLICATE KEY UPDATE" s·∫Ω t·∫°o m·ªõi n·∫øu ch∆∞a c√≥,
        // ho·∫∑c c·∫≠p nh·∫≠t th·ªùi gian n·∫øu session ƒë√£ t·ªìn t·∫°i (tr∆∞·ªùng h·ª£p hi·∫øm).
        String sql = """
            INSERT INTO active_sessions (session_id, user_id, status, last_heartbeat, created_at)
            VALUES (?, ?, 'IN_LOBBY', NOW(), NOW())
            ON DUPLICATE KEY UPDATE last_heartbeat = NOW(), status = 'IN_LOBBY'
            """;

        try (Connection conn = dbManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, sessionId);
            stmt.setInt(2, Integer.parseInt(userId)); // Script DB ƒë√£ ƒë·ªïi user_id th√†nh INT
            stmt.executeUpdate();
        }
    }

    private void deleteSessionFromDB(String sessionId) throws SQLException {
        String sql = "DELETE FROM active_sessions WHERE session_id = ?";

        try (Connection conn = dbManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, sessionId);
            stmt.executeUpdate();
        }
    }
}